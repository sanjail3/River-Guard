import pandas as pd
from geopy.geocoders import Nominatim
import pandas as pd
from fpdf import FPDF
import streamlit as st
import base64


def change_font_color(element, text, font_color):
    st.markdown(f'<{element} style="color: {font_color};">{text}</{element}>', unsafe_allow_html=True)

def get_place_name(latitude, longitude):
    # Function to get the place name using latitude and longitude
    geolocator = Nominatim(user_agent="plastic-heatmap")
    location = geolocator.reverse((latitude, longitude), exactly_one=True)
    return location.address.split(",")[-3].strip()

def extract_and_save_data(input_csv, output_csv):
    # Read the data from the input CSV file
    data = pd.read_csv(input_csv)

    # Add a new column for the place name
    data['Place_Name'] = data.apply(lambda row: get_place_name(row['latitude'], row['longitude']), axis=1)

    # Create a new DataFrame with only the required columns (Place_Name and PRED_CT)
    new_data = data[['Place_Name', 'PRED_CT',"GEO_Tag_URL"]]
    new_data.rename(columns={'Place_Name': 'City Name',
                       'PRED_CT': 'Plastic Count','GEO_Tag_URL':'GEO Tag URL'},
              inplace=True, errors='raise')

    # Save the updated data to a new CSV file
    new_data.to_csv(output_csv, index=False)




# ... (previous code)
def render_report(rep_data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, 'AI generated Plastic Count Report', 0, 1, 'C')
    pdf.cell(0, 10, '------------------------------', 0, 1, 'C')

    # Convert the report_data to a DataFrame
    report_data = pd.DataFrame(rep_data)

    col_width = 60
    col_height = 10
    url_max_length = 50  # Maximum length of the GEO Tag URL to fit in the cell

    for field in report_data.columns:
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(col_width, col_height, field, 1, 0, 'C')
    pdf.ln()

    # Table Rows
    for index, row in report_data.iterrows():
        for field in report_data.columns:
            pdf.set_font('Arial', '', 12)
            # Use 'utf-8' encoding to handle non-Latin-1 characters
            # Truncate the text if it's too long to fit in the cell
            cell_content = str(row[field]).encode('latin-1', 'replace').decode('latin-1')[:30]
            pdf.cell(col_width, col_height, cell_content, 1, 0, 'C')

        # Display the GEO Tag URL as a clickable link in the same row
        url = row['GEO Tag URL']
        truncated_url = (url[:url_max_length - 3] + '...') if len(url) > url_max_length else url
        col_width_url = col_width  # Use the default column width
        while pdf.get_string_width(truncated_url) > col_width_url:
            url_max_length -= 1
            truncated_url = (url[:url_max_length - 3] + '...') if len(url) > url_max_length else url
            col_width_url = col_width - 5  # Reduce the column width by 5 for each iteration

        pdf.set_text_color(0, 0, 255)  # Set text color to blue
        pdf.set_font('Arial', 'U', 12)  # Set font style to underline
        pdf.cell(col_width_url, col_height, truncated_url, 1, 0, 'C', link=url)
        pdf.set_text_color(0, 0, 0)  # Reset text color to black
        pdf.set_font('Arial', '', 12)  # Reset font style
        pdf.ln()  # Add a line break after displaying the GEO Tag URL

    base64_pdf = base64.b64encode(pdf.output(dest="S").encode("latin-1")).decode('utf-8')
    pdf_display = f'<embed src="data:application/pdf;base64,{base64_pdf}" width="700" height="1000" type="application/pdf">'
    st.markdown(pdf_display, unsafe_allow_html=True)

    html = create_download_link(pdf.output(dest="S").encode("latin-1"), "Report.pdf")
    st.markdown(html, unsafe_allow_html=True)


def create_download_link(pdf_data, title):
    b64_pdf = base64.b64encode(pdf_data).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64_pdf}" download="{title}.pdf">Download Report</a>'
    return href



def report():
    change_font_color('h2','Reports','black')
    change_font_color('p',"The Plastic Identification report generated by the AI Inference Engine can be viewed here and downloaded","black")

    if st.button('Get Report'):
        # extract_and_save_data("predictions_sm.csv","out_csv.csv")
        report = generateReport()
        render_report(report)


def generateReport():
    df = pd.read_csv('Data_Files/out_csv.csv')

    # Group by city name and sum the plastic count
    grouped_data = df.groupby('City Name', as_index=False).agg({'Plastic Count': 'sum', 'GEO Tag URL': 'first'})

    # Sort the data by the plastic count in ascending order
    sorted_data = grouped_data.sort_values('Plastic Count', ascending=False)

    return sorted_data
if __name__=='__main__':
    report()